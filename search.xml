<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>jest quick start</title>
    <url>/blog/2022/10/20/jest-quick-start/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因為我嘗試 quickstart jest (前端 unit test)<br>但因為沒特別注意到版本問題 (其實也是因為菜)<br>所以才有這篇記錄, 順便養成寫 blog 的感覺(?</p>
<h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><p>node version : 12.16.0</p>
<h2 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h2><p>npm init -y<br>npm install jest –save-dev (jest 只需要在開發環境)<br><img src="/blog/2022/10/20/jest-quick-start/version.jpg"><br>npx jest<br><img src="/blog/2022/10/20/jest-quick-start/error.jpg"></p>
<p>接下來切換 node 版本 14.15.0</p>
<h2 id="cmd-1"><a href="#cmd-1" class="headerlink" title="cmd:"></a>cmd:</h2><p>npx jest<br><img src="/blog/2022/10/20/jest-quick-start/run.jpg"></p>
<h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>一開始還傻傻的搜尋 error 是什麼原因, 後來嘗試切換版本<br>發現可以執行…<br>如果真的要使用舊版本的 node 執行 jest<br>應該查看版本 release 資訊, 找尋跟 node 版本時間相近的去安裝<br><a href="https://www.npmjs.com/package/jest/v/26.6.3">https://www.npmjs.com/package/jest/v/26.6.3</a><br>(npm i <a href="mailto:&#x6a;&#101;&#115;&#116;&#64;&#x32;&#x36;&#46;&#x36;&#x2e;&#51;">&#x6a;&#101;&#115;&#116;&#64;&#x32;&#x36;&#46;&#x36;&#x2e;&#51;</a>)<br>沒指定版本的狀況下&#x3D;安裝最新版<br>當然就有套件依賴性的問題</p>
<h2 id="以上菜鳥發傻記-第一回-結束"><a href="#以上菜鳥發傻記-第一回-結束" class="headerlink" title="以上菜鳥發傻記 第一回 結束"></a>以上菜鳥發傻記 第一回 結束</h2><h4 id="參考"><a href="#參考" class="headerlink" title="參考:"></a>參考:</h4><p><a href="https://jestjs.io/">https://jestjs.io/</a><br><a href="https://www.npmjs.com/">https://www.npmjs.com/</a></p>
]]></content>
      <categories>
        <category>newbie</category>
      </categories>
      <tags>
        <tag>jest</tag>
      </tags>
  </entry>
  <entry>
    <title>初識 JWT</title>
    <url>/blog/2022/11/16/%E5%88%9D%E8%AD%98-JWT/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因為我竟然不認識 JWT 是甚麼東西<br>所以有了這一篇紀錄, 繼續養成紀錄習慣</p>
<h2 id="初識-JWT"><a href="#初識-JWT" class="headerlink" title="初識 JWT"></a>初識 JWT</h2><blockquote>
<p>JWT 重點不在將資料隱藏, 而是確保發出的憑證, 是否有被竄改</p>
</blockquote>
<h3 id="JWT-JSON-Web-Tokens-其實就是一種-Token-的形式"><a href="#JWT-JSON-Web-Tokens-其實就是一種-Token-的形式" class="headerlink" title="JWT (JSON Web Tokens) , 其實就是一種 Token 的形式"></a>JWT (JSON Web Tokens) , 其實就是一種 Token 的形式</h3><h4 id="規範參考"><a href="#規範參考" class="headerlink" title="規範參考"></a>規範參考</h4><ol>
<li>JWS : JSON Web Signature         <a href="https://www.rfc-editor.org/rfc/rfc7515">RFC 7515</a>      定義製作有”簽章的”</li>
<li>JWE :  JSON Web Encryption       <a href="https://www.rfc-editor.org/rfc/rfc7516">RFC 7516</a>      定義”內容加密”</li>
<li>JWK : JSON Web Key               <a href="https://www.rfc-editor.org/rfc/rfc7517">RFC 7517</a>      金鑰的格式與演算</li>
<li>JWA : JSON Web Algorithms        <a href="https://www.rfc-editor.org/rfc/rfc7518">RFC 7518</a>      金鑰的格式與演算</li>
<li>JWT : JSON Web Tokens            <a href="https://www.rfc-editor.org/rfc/rfc7519">RFC 7519</a>      定義 Header , Payload 與協定的相關規範<br>可以說 JWT 屬於規範, 而 JWS 與 JWE 像是實作</li>
</ol>
<blockquote>
<p>目前接觸到的情況, 大部分說 JWT 指的就是 JWS</p>
</blockquote>
<h3 id="JWT-格式"><a href="#JWT-格式" class="headerlink" title="JWT 格式"></a>JWT 格式</h3><p>Header:<br>{<br>    “alg” : 演算法, 協定也有訂出適合的演算法  JWS (Section 3.1) , JWE(Section 4.1)<br>    “typ” : “JWT” 通常都是 JWT<br>}<br>JWS Payload:(RFC 7519 有制定格式如下, 但也可以自組)<br>{<br>    “iss” : 發行方<br>    “sub” : 表示夾帶的唯一識別訊息<br>    “aud” : 預期接收者<br>    “exp” : 到期時間<br>    “nbf” : 生效時間<br>    “iat” : 發行時間<br>    “jti” : 唯一識別的 JWT ID<br>}<br>JWS Signature:<br>Signature &#x3D;  演算法 ( secret key, ((Base64(header) + Base64(payload))</p>
<h4 id="JWE-格式-想了解詳細再查"><a href="#JWE-格式-想了解詳細再查" class="headerlink" title="JWE 格式(想了解詳細再查)"></a>JWE 格式(想了解詳細再查)</h4><p>{<br>    Header<br>    Encrypted Key<br>    Initialization Vector(IV)<br>    Ciphertext<br>    Authentication Tag<br>}</p>
<h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>基本上就是透過演算法(參考上述的alg), 數位簽章式的驗證, 資料被竄改</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>Oauth 規範中, token 放在 Header 進行傳遞</p>
<blockquote>
<p>Auth header : bearer [token]<br>關於 bearer 需要參考規範 <a href="https://www.rfc-editor.org/rfc/rfc6750">RFC 6750</a> 而且需要 TLS 環境</p>
</blockquote>
<p>機密或敏感資料不要放 payload</p>
<blockquote>
<p>但是實務上要不要跟著規範走…..就看人XD</p>
</blockquote>
<p>以上…基本上是隨筆, 有錯誤煩請指正</p>
]]></content>
      <categories>
        <category>newbie</category>
      </categories>
      <tags>
        <tag>JWT</tag>
        <tag>newbie</tag>
      </tags>
  </entry>
  <entry>
    <title>asp.net mvc model validate</title>
    <url>/blog/2023/01/07/asp-net-mvc-model-validate/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>寫這篇的原因單純只是做一個紀錄, 避免未來忘記  </p>
<p>只要你的系統有在使用, 很難避免的就是有人亂搞, 想要玩你的資料格式, 看能不能搞出甚麼東西來<br>也有可能彼此說好的格式突然改變了….等等等雜七雜八的狀況<br>這時需要做的就是資料驗證<br>不管在前後端, 資料驗證都是非常必要的一個動作<br>在此處只會提到 asp.net mvc (framework 4.5) 的 model validaate (後端驗證) (ModelState)</p>
<h3 id="驗證的時機"><a href="#驗證的時機" class="headerlink" title="驗證的時機?"></a>驗證的時機?</h3><p>通常, Controller 是我們的第一關, 我們的系統層級通常不會只有 Controller 一層<br>所以如果能越早攔截到資料錯誤, 阻止程式往下一層級傳遞, 在我看來應該是件好事  </p>
<p>而資料傳遞時, 通常我們在 Controller Action 可以定義參數, 或者是建一個 model<br>讓　.net 來替我們 Model Binding<br>如果是建一個 model , 那我們方便的地方就很多了<br>建立好需要的屬性之後, 可以利用內建的 Attribute 來對資料驗證<br>如下 [Required] 就是利用內建屬性來綁定</p>
<blockquote>
</blockquote>
<pre><code>public class AccountTest
&#123;
    // 帳號
    [Required]
    public string Account &#123; get; set; &#125;

    // 密碼
    [Required]
    public string Password &#123; get; set; &#125;
&#125;
</code></pre>
<p>其他能綁定的條件, 網路上很多, 而且一定寫得比我好, 我就不亂寫出來傷眼睛了</p>
<h3 id="自訂驗證"><a href="#自訂驗證" class="headerlink" title="自訂驗證"></a>自訂驗證</h3><p>在製作的 Model裡 可以繼承並實作 IValidatableObject 介面  </p>
<blockquote>
<p>只有一個方法需要實作</p>
</blockquote>
<pre><code>// model
public class AccountTest : IValidatableObject
&#123;
    // 帳號
    [Required]
    public string Account &#123; get; set; &#125;

    // 密碼
    [Required]
    public string Password &#123; get; set; &#125;

    public IEnumerable&lt;ValidationResult&gt; Validate(ValidationContext validationContext)
    &#123;
        // todo : 要驗證的邏輯  
        // 如果想要針對某個欄位驗證, 或是也想自訂自己的錯誤訊息 ex:
        // return new ValidationResult(&quot;測試使用&quot;, new[] &#123; nameof(Account) &#125;);
        // &quot;測試使用&quot;就是自訂的錯誤訊息
        // 後方 nameof(指定欄位屬性做驗證)
    &#125;
&#125;


// controller
public JsonResult LoginTest(AccountTest model)&#123;
    if (!ModelState.IsValid)
    &#123;
        // 我們可以從 ModelState.Values 項目中 where 出 error 的部分自組錯誤訊息回傳給前端
        //ex1
        var errorMsg = (
                from modelState in ViewData.ModelState.Values
                from error in modelState.Errors
                select error.ErrorMessage
            ).ToList();
                
        return Json(new &#123; success = false, message = errorMsg &#125;);
    &#125;
    // todo : do something...
&#125;
</code></pre>
<h3 id="簡化"><a href="#簡化" class="headerlink" title="簡化?"></a>簡化?</h3><p>每次如果 Controller 都要這樣取 errMsg 實在有點煩, 而且重複的 code 會變得非常多<br>這時候, 參考文章<br><a href="https://blog.miniasp.com/post/2016/03/14/ASPNET-MVC-Developer-Note-Part-28-Understanding-ModelState">保哥ASP.NET MVC 開發心得分享 (28)：深入了解 ModelState 內部細節</a></p>
<p>ModelState 是在 ViewData 中取得的</p>
<blockquote>
<p>額外補充, ViewBag 也是由 ViewData 衍伸出, 但彼此間不共享資料  </p>
</blockquote>
<p>所以可以另外擴充一個方法</p>
<blockquote>
</blockquote>
<pre><code>// extend
public static class ModelStateExtensions
&#123;
    public static string GetModelStateErrorMessage(this ViewDataDictionary viewData)
    &#123;
        // 取得第一個 error message
        // 想要不同方式, 另外調整
        return (
            from m in viewData.ModelState.Values
            from e in m.Errors
            where !string.IsNullOrEmpty(e.ErrorMessage)
            select e.ErrorMessage
        ).FirstOrDefault();
    &#125;
&#125;
</code></pre>
<p>如此一來, 原本的 Controller 便可以改為</p>
<pre><code>// controller
public JsonResult LoginTest(AccountTest model)&#123;
    if (!ModelState.IsValid)
    &#123;                   
        return Json(new &#123; success = false, message = ViewData.GetModelStateErrorMessage() &#125;);
    &#125;
    // todo : do something...
&#125;
</code></pre>
<p>以上…基本上做一個簡單紀錄, 有錯誤也請麻煩指正, 感謝</p>
]]></content>
      <tags>
        <tag>c#</tag>
        <tag>asp.net mvc (framework)</tag>
      </tags>
  </entry>
  <entry>
    <title>當 npm install 時 NPM ERR</title>
    <url>/blog/2023/02/01/%E7%95%B6-npm-install-%E6%99%82-NPM-ERR/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>當我使用 nvm 切換 node 高版本並 npm install something…時</p>
<blockquote>
<p>npm ERR! Unexpected token ‘.’</p>
</blockquote>
<p>先前的解決方式是…因為暫時還不需要用到高版本的 node , 所以降板後使用正常, 就繼續用了<br>但已經遇到 3 次這樣的情況, 所以決定要來根絕這個問題, 避免以後再發生  </p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因?"></a>原因?</h2><p>Google 後發現這是因為 nvm for windows 的問題<br>簡單來說是因為 nvm 與 npm 版本不相容的關係<br>原先我使用的 nvm 版本為 1.1.7…</p>
<p><a href="https://github.com/coreybutler/nvm-windows/releases">nvm 版本 release 資訊</a></p>
<h2 id="下載最新-nvm-for-windows-1-1-10"><a href="#下載最新-nvm-for-windows-1-1-10" class="headerlink" title="下載最新 nvm for windows 1.1.10"></a>下載最新 nvm for windows 1.1.10</h2><p>更新 nvm 版本後<br>聽說這一段很重要<br>更新完成之後，務必要透過 nvm uninstall 把先前裝好的 node 移除、再 nvm install 重新安裝。<br>更新完成之後，務必要透過 nvm uninstall 把先前裝好的 node 移除、再 nvm install 重新安裝。<br>更新完成之後，務必要透過 nvm uninstall 把先前裝好的 node 移除、再 nvm install 重新安裝。</p>
<p>想當然的…原先npm instyall -g 的東西也沒了  </p>
<p>以上…原先 npm install something…正常安裝使用中….</p>
]]></content>
      <tags>
        <tag>nvm</tag>
        <tag>npm</tag>
      </tags>
  </entry>
</search>
